% MAKECOLORCET - Constructs the COLORCET function
%
% Usage: makecolorcet
%
% The colourmaps to include within the function are hard-wired in the
% code, edit to suit
%
% See also: COLORCET, CMAP

% 2017 Peter Kovesi
% Centre for Exploration Targeting
% The University of Western Australia
% peter.kovesi at uwa edu au

% PK March 2017

% ** To do: allow for specification of N by sub sampling/interpolation **

function makecolorcet
    
    mapnames = {{'L1' 'GREY' 'GRAY'}
                {'L2' 'REDUCEDGREY' }
                {'L3' 'HEAT' 'FIRE'}
                {'L4' 'YELLOWHEAT' }
                {'L5' }
                {'L6' }
                {'L7' }
                {'L8' 'BMY' }
                {'L9' 'BGYW' }
                {'L10' 'GEOGRAPHIC' }
                {'L11' 'GEOGRAPHIC2' }
                {'L12' 'DEPTH' }
                {'L13' 'REDTERNARY'}
                {'L14' 'GREENTERNARY'}
                {'L15' 'BLUETERNARY'}
                {'D1' 'COOLWARM' }
                {'D2' }
                {'D3' }
                {'D4' }
                {'D5' }
                {'D6' }
                {'D7' 'DIVBGY'}
                {'D8' }
                {'D9' }
                {'D10' }
                {'D11' }
                {'D12' }
                {'C1' }	    
                {'C2' 'PHASE4' }
                {'C3' }
                {'C4' 'PHASE2' }
                {'C5' 'CYCLICGREY' }
                {'C6' }
                {'C7' }
                {'C8' }
                {'C9' }
                {'R1' 'RAINBOW'}
                {'R2' 'RAINBOW2'}
                {'R3' 'RAINBOW3'}
                {'I1' }
                {'I2' }
                {'I3' }};
    
    space4 = '    ';
    space8 = '        ';
    N = 256;
    
    % If colorcet.m exists back it up.  Use the mv command so this will
    % only work on Linux or OSX
    if exist('colorcet.m', 'file')
        backupname = ['colorcet' '_backup_' date '.m'];
        system(['mv colorcet.m ' backupname]);
    end
    
    [fid, msg] = fopen('colorcet.m', 'wt');
    error(msg);
    
    writecelltext(fid, helptext)
    
    fprintf(fid, '%% Generated by MAKECOLORCET %s\n\n', date);
    
    fprintf(fid, 'function [map, descriptorname, description] = colorcet(mapname)\n');
    
    % Write the list of mapnames to colorcet so that it can generate full
    % help data
    fprintf(fid, '\nmapnames = {\n');
    for n = 1:length(mapnames)
        fprintf(fid, '{');
        for m = 1:length(mapnames{n})
            fprintf(fid, ' ''%s'' ', upper(mapnames{n}{m}));
        end
        fprintf(fid, '}\n');        
    end
    fprintf(fid, '};\n\n');

    writecelltext(fid, listalltext)    
    
    fprintf(fid, 'switch upper(mapname) \n');
    
    for n = 1:length(mapnames)
        [map, descriptorname, description] = cmap(mapnames{n}{1}, 'N', N);

        fprintf(fid, 'case {');
        for m = 1:length(mapnames{n})
            fprintf(fid, ' ''%s'' ', upper(mapnames{n}{m}));
        end
        fprintf(fid, '}\n');        

        
        fprintf(fid, 'descriptorname = ''%s'';\n', descriptorname);
        fprintf(fid, 'description = ''%s'';\n', description);
        
        fprintf(fid, 'map = [%f %f %f\n', map(1,1), map(1,2), map(1,3));
        for m = 2:N-1
            fprintf(fid, '       %f %f %f\n', map(m,1), map(m,2), map(m,3));
        end
        
        fprintf(fid, '       %f %f %f];\n\n', map(N,1), map(N,2), map(N,3));
        
        
    end % for n = 1:length(mapnames)
    
    fprintf(fid, 'otherwise\n');
    fprintf(fid, 'error(''Unrecognised colour map name'')\n');
    
    fprintf(fid, 'end \n\n');  % end of switch

%----------------------------------------------------------
% Function to write text stored in a cell array to a fileid

function writecelltext(fid, txt)
    
    for n = 1:length(txt)
        fprintf(fid,'%s\n', txt{n});
    end
    
%----------------------------------------------------------
% Function to define help text

function txt = helptext
    
    txt = {...
        '% COLORCET - Perceptually uniform color maps'
        '%'
        '% Usage 1: [map, descriptorname, description] = colorcet(name)'
        '%'
        '% Usage 2: colorcet   (to get a list of all possible colour maps)'
        '%'
        '% Argument:'
        '%       name - A string label indicating the colour map to be generated.'
        '%' 
        '%     names:  ''L1'' - ''L15''  for linear maps'
        '%             ''D1'' - ''D12''  for diverging maps'
        '%             ''C1'' - ''C9''   for cyclic maps'
        '%             ''R1'' - ''R3''   for rainbow maps'
        '%             ''I1'' - ''I3''   for isoluminant maps'
        '%'
        '% Returns:'
        '%            map - Nx3 rgb colour map'
        '% descriptorname - A string giving a systematic descriptor name for the colour map.'
        '%    description - A string giving a brief description of the colour map.'
        '%'
        '%'
        '% Some colour maps have alternate names for convenience and readability.'
        '% For example:'
        '%   >> map = colorcet(''L3'')  or map = colorcet(''heat'')  will produce a linear heat map.'
        '%   >> colorcet;       % Lists all the colour maps and their names'
        '%'
        '% Example of use:'
        '% Load up the SINERAMP test image and render it with MATLAB''s hot map'
        '%   >> figure; imagesc(sineramp); colormap(hot);'
        '%'
        '% Now repeat using the colorcet perceptually uniform heat map'
        '%   >> figure; imagesc(sineramp); colormap(colorcet(''heat'');'
        '% Notice the difference! No preceptual dead spots across the top of the' 
        '% test image and no false features across the bottom.'
        '%'
        '% Some colour maps likely to be of interest:'
        '%   L1/GREY/GRAY  - Standard grey colour map '
        '%   L3/HEAT/FIRE  - A good heat colour map with no perceptual dead spots.'
        '%   L9/BGYW       - Reminicent of MATLAB''s Perula but without the orange '
        '%                   segment (and without any IP issues.)'
        '%   D1/COOLWARM   - Standard blue-white-red diverging colour map with'
        '%                   end colours matched for lightness and chroma.'
        '%   R1/RAINBOW    - The least worst rainbow colour map I could devise,'
        '%                   actually it''s not bad.'
        '%   R3/RAINBOW3   - Rainbow map that can also be used as a diverging map'
        '%                   with yellow as the reference centre colour.'
        '%   C2/PHASE4     - Good cyclic map with four distinct colours allowing'
        '%                   four orientations or phase angles to be visualised.'
        '%   C4/PHASE2     - A blue - white - red cyclic map for when you are only'
        '%                   interested in phase being +ve or -ve.'
        '%'
        '% The colour map arrays in this function have been generated by the function CMAP.'
        '%'
        '% See also: CMAP, MAKECOLORCET, SINERAMP'
        ''
        '% These colour maps are released under the Creative Commons BY License.'
        '% A summary of the conditions can be found at'
        '% https://creativecommons.org/licenses/by/4.0/'
        '% Basically, you are free to use these colour maps in anyway you wish'
        '% as long as you give appropriate credit.'
        '%'
        '% Reference:'
        '% Peter Kovesi. Good Colour Maps: How to Design Them.'
        '% arXiv:1509.03700 [cs.GR] 2015'
        '% https://arxiv.org/abs/1509.03700'
        ''
        '% Copyright (c) 2017 Peter Kovesi'
        '% Centre for Exploration Targeting'
        '% The University of Western Australia'
        '% peter.kovesi at uwa edu au'
        '%'
        '% Permission is hereby granted, free of charge, to any person obtaining a copy'
        '% of this software and associated documentation files (the "Software"), to deal'
        '% in the Software without restriction, subject to the following conditions:'
        '%'
        '% The above copyright notice and this permission notice shall be included in'
        '% all copies or substantial portions of the Software.'
        '%'
        '% The Software is provided "as is", without warranty of any kind.'
        ''};
    
%----------------------------------------------------------
% Function to define code for printing all the colour map names and descriptions

function txt = listalltext    

    txt = {...
        'spaces = ''                                                           '';'
        ''
        'if ~exist(''mapname'', ''var'')'
        ''
        'fprintf(''\nName(s):         Description:\n'');'
        'fprintf(''------------------------------------------------------\n'');'
        ''
        'for n = 1:length(mapnames)'
        '    [map, descriptorname, description] = colorcet(mapnames{n}{1});'
        ''
        '    len = 0;'
        '    for m = 1:length(mapnames{n})'
        '        len = len + fprintf(''%s'', upper(mapnames{n}{m}));'
        '        if m < length(mapnames{n})'
        '            len = len+fprintf(''/'');'
        '        end'
        '    end'
        ''
        '    fprintf(''%s'', spaces(1:16-len));'
        '    fprintf('' %s \n'', description);'
        'end'
        ''
        'clear map'
        'clear descriptorname'
        'clear description'
        'return'
        'end'
        ''};
    
    
    